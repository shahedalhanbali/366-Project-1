// Design a 1-bit full-adder in Verilog using behavioral modeling. 
// Assume that the inputs are A, B, and Cin, and the outputs are S, Cout. 
// Use the module template of Figure 1(a). [Points: 5]

// Code Design
`timescale 1ns / 1ps
module one_bit_full_adder(A, B, Cin, S, Cout);
   	input A, B, Cin;
    	output S, Cout;

    	assign S = A ^ B ^ Cin;
    	assign Cout = (A & B) | (B & Cin) | (A & Cin);

endmodule
 

// Code for Testbench 
`timescale 1ns / 1ps

module tb_one_bit_full_adder;
    reg A, B, Cin;
    wire S, Cout;

    // Instantiate the full adder module
    one_bit_full_adder uut (
        .A(A),
        .B(B),
        .Cin(Cin),
        .S(S),
        .Cout(Cout)
    );

    initial begin
        $monitor("A=%b B=%b Cin=%b | S=%b Cout=%b", A, B, Cin, S, Cout);
        
        // Test all possible input combinations
        A = 0; B = 0; Cin = 0; #10;
        A = 0; B = 0; Cin = 1; #10;
        A = 0; B = 1; Cin = 0; #10;
        A = 0; B = 1; Cin = 1; #10;
        A = 1; B = 0; Cin = 0; #10;
        A = 1; B = 0; Cin = 1; #10;
        A = 1; B = 1; Cin = 0; #10;
        A = 1; B = 1; Cin = 1; #10;

        $finish;
    end
endmodule

// Design a 1-bit full-adder in Verilog using structural modeling. 
// Assume that the inputs are A, B, and Cin, and outputs are S, Cout. 
// Use the module template of Figure 1(a). [Points : 5]


// Code Design
`timescale 1ns / 1ps
module one_bit_full_adder_structural(A, B, Cin, S, Cout);
    input A, B, Cin;
    output S, Cout;

    wire w1, w2, w3;

    xor (w1, A, B);
    xor (S, w1, Cin);
    and (w2, A, B);
    and (w3, w1, Cin);
    or  (Cout, w2, w3);

endmodule

// Code for testbench 
`timescale 1ns / 1ps

module tb_one_bit_full_adder;
    reg A, B, Cin;
    wire S, Cout;

    one_bit_full_adder_structural uut (
    .A(A),
    .B(B),
    .Cin(Cin),
    .S(S),
    .Cout(Cout)
);

    initial begin
        $monitor("A=%b B=%b Cin=%b | S=%b Cout=%b", A, B, Cin, S, Cout);
        
        // Test all possible input combinations
        A = 0; B = 0; Cin = 0; #10;
        A = 0; B = 0; Cin = 1; #10;
        A = 0; B = 1; Cin = 0; #10;
        A = 0; B = 1; Cin = 1; #10;
        A = 1; B = 0; Cin = 0; #10;
        A = 1; B = 0; Cin = 1; #10;
        A = 1; B = 1; Cin = 0; #10;
        A = 1; B = 1; Cin = 1; #10;

        $finish;
    end
endmodule

