// Design a 1-bit full-adder in Verilog using behavioral modeling. 
// Assume that the inputs are A, B, and Cin, and the outputs are S, Cout. 
// Use the module template of Figure 1(a). [Points: 5]

// Code Design
`timescale 1ns / 1ps
module one_bit_full_adder(A, B, Cin, S, Cout);
   	input A, B, Cin;
    	output S, Cout;

    	assign S = A ^ B ^ Cin;
    	assign Cout = (A & B) | (B & Cin) | (A & Cin);

endmodule
 

// Code for Testbench 
`timescale 1ns / 1ps

module tb_one_bit_full_adder;
    reg A, B, Cin;
    wire S, Cout;

    // Instantiate the full adder module
    one_bit_full_adder uut (
        .A(A),
        .B(B),
        .Cin(Cin),
        .S(S),
        .Cout(Cout)
    );

    initial begin
        $monitor("A=%b B=%b Cin=%b | S=%b Cout=%b", A, B, Cin, S, Cout);
        
        // Test all possible input combinations
        A = 0; B = 0; Cin = 0; #10;
        A = 0; B = 0; Cin = 1; #10;
        A = 0; B = 1; Cin = 0; #10;
        A = 0; B = 1; Cin = 1; #10;
        A = 1; B = 0; Cin = 0; #10;
        A = 1; B = 0; Cin = 1; #10;
        A = 1; B = 1; Cin = 0; #10;
        A = 1; B = 1; Cin = 1; #10;

        $finish;
    end
endmodule

// Design a 1-bit full-adder in Verilog using structural modeling. 
// Assume that the inputs are A, B, and Cin, and outputs are S, Cout. 
// Use the module template of Figure 1(a). [Points : 5]


// Code Design
`timescale 1ns / 1ps
module one_bit_full_adder_structural(A, B, Cin, S, Cout);
    input A, B, Cin;
    output S, Cout;

    wire w1, w2, w3;

    xor (w1, A, B);
    xor (S, w1, Cin);
    and (w2, A, B);
    and (w3, w1, Cin);
    or  (Cout, w2, w3);

endmodule

// Code for testbench 
`timescale 1ns / 1ps

module tb_one_bit_full_adder;
    reg A, B, Cin;
    wire S, Cout;

    one_bit_full_adder_structural uut (
    .A(A),
    .B(B),
    .Cin(Cin),
    .S(S),
    .Cout(Cout)
);

    initial begin
        $monitor("A=%b B=%b Cin=%b | S=%b Cout=%b", A, B, Cin, S, Cout);
        
        // Test all possible input combinations
        A = 0; B = 0; Cin = 0; #10;
        A = 0; B = 0; Cin = 1; #10;
        A = 0; B = 1; Cin = 0; #10;
        A = 0; B = 1; Cin = 1; #10;
        A = 1; B = 0; Cin = 0; #10;
        A = 1; B = 0; Cin = 1; #10;
        A = 1; B = 1; Cin = 0; #10;
        A = 1; B = 1; Cin = 1; #10;

        $finish;
    end
endmodule

// Design a 4-bit Ripple-Carry Adder (RCA). 
// Use the module template of 1(b)

`timescale 1ns / 1ps
module one_bit_full_adder(A, B, Cin, S, Cout);
    input A, B, Cin;
    output S, Cout;

    // Full adder logic
    assign S = A ^ B ^ Cin;
    assign Cout = (A & B) | (B & Cin) | (A & Cin);

endmodule

module four_bit_RCA(A, B, Cin, S, Cout);
    input [3:0] A, B;
    input Cin;
    output [3:0] S;
    output Cout;

    wire C1, C2, C3;

    // Instantiate four 1-bit full adders
    one_bit_full_adder FA0 (A[0], B[0], Cin,  S[0], C1);
    one_bit_full_adder FA1 (A[1], B[1], C1,   S[1], C2);
    one_bit_full_adder FA2 (A[2], B[2], C2,   S[2], C3);
    one_bit_full_adder FA3 (A[3], B[3], C3,   S[3], Cout);

endmodule


// Code for Testbench 

`timescale 1ns / 1ps

module tb_four_bit_RCA;
    reg [3:0] A, B;
    reg Cin;
    wire [3:0] S;
    wire Cout;

    // Instantiate the RCA module
    four_bit_RCA uut (
        .A(A),
        .B(B),
        .Cin(Cin),
        .S(S),
        .Cout(Cout)
    );

    initial begin
        $monitor("A=%b B=%b Cin=%b | S=%b Cout=%b", A, B, Cin, S, Cout);
        
        // Test cases
        A = 4'b0000; B = 4'b0000; Cin = 0; #10;
        A = 4'b0001; B = 4'b0010; Cin = 0; #10;
        A = 4'b0110; B = 4'b0101; Cin = 0; #10;
        A = 4'b1001; B = 4'b0111; Cin = 1; #10;
        A = 4'b1111; B = 4'b1111; Cin = 1; #10;

        $finish;
    end
endmodule

// Enhance the 4-bit RCA of Part (c) to construct 4-bit Ripple-Carry Subtractor (RCS). 
// Use the module template of 1(b)

// Design Code

`timescale 1ns / 1ps
module one_bit_full_adder(A, B, Cin, S, Cout);
    input A, B, Cin;
    output S, Cout;

    assign S = A ^ B ^ Cin;
    assign Cout = (A & B) | (B & Cin) | (A & Cin);
endmodule

module four_bit_RCS(A, B, Sub, S, Cout);
    input [3:0] A, B;
    input Sub;  // Control signal: 0 for addition, 1 for subtraction
    output [3:0] S;
    output Cout;

    wire [3:0] B_comp; // Complemented B
    wire C1, C2, C3;

    // If Sub = 1, invert B (two's complement)
    assign B_comp = B ^ {4{Sub}};

    // Instantiate four 1-bit full adders
    one_bit_full_adder FA0 (A[0], B_comp[0], Sub,  S[0], C1);
    one_bit_full_adder FA1 (A[1], B_comp[1], C1,   S[1], C2);
    one_bit_full_adder FA2 (A[2], B_comp[2], C2,   S[2], C3);
    one_bit_full_adder FA3 (A[3], B_comp[3], C3,   S[3], Cout);

endmodule

// Code for Testbench

`timescale 1ns / 1ps

module tb_four_bit_RCS;
    reg [3:0] A, B;
    reg Sub; // Subtraction control signal
    wire [3:0] S;
    wire Cout;

    // Instantiate the RCS module
    four_bit_RCS uut (
        .A(A),
        .B(B),
        .Sub(Sub),
        .S(S),
        .Cout(Cout)
    );

    initial begin
        $monitor("A=%b B=%b Sub=%b | S=%b Cout=%b", A, B, Sub, S, Cout);
        
        // Test cases
        A = 4'b0101; B = 4'b0011; Sub = 0; #10;  // 5 + 3 = 8
        A = 4'b0101; B = 4'b0011; Sub = 1; #10;  // 5 - 3 = 2
        A = 4'b1001; B = 4'b0100; Sub = 1; #10;  // 9 - 4 = 5
        A = 4'b0001; B = 4'b0010; Sub = 1; #10;  // 1 - 2 = -1 (should show 1111 in 2's complement)
        A = 4'b1111; B = 4'b0001; Sub = 1; #10;  // -1 - 1 = -2 (should show 1110 in 2's complement)
        
        $finish;
    end
endmodule

// Design a testbench to test the 4-bit RCA/RCS. The testbench must perform at least one addition and one subtraction of two numbers (both signed and unsigned numbers). (See the link at Testbench writing). [Hint: See Lecture 1 and Lecture 2 for signed number arithmetic.] [Points: 20]

// Design Code

`timescale 1ns / 1ps

// 1-bit Full Adder
module one_bit_full_adder(A, B, Cin, S, Cout);
    input A, B, Cin;
    output S, Cout;

    assign S = A ^ B ^ Cin;
    assign Cout = (A & B) | (B & Cin) | (A & Cin);
endmodule

// 4-bit Ripple Carry Adder (RCA)
module four_bit_RCA(A, B, Cin, S, Cout);
    input [3:0] A, B;
    input Cin;
    output [3:0] S;
    output Cout;

    wire C1, C2, C3;

    // Instantiating four 1-bit full adders
    one_bit_full_adder FA0 (A[0], B[0], Cin,  S[0], C1);
    one_bit_full_adder FA1 (A[1], B[1], C1,   S[1], C2);
    one_bit_full_adder FA2 (A[2], B[2], C2,   S[2], C3);
    one_bit_full_adder FA3 (A[3], B[3], C3,   S[3], Cout);
endmodule

// 4-bit Ripple Carry Subtractor (RCS)
module four_bit_RCS(A, B, Sub, S, Cout);
    input [3:0] A, B;
    input Sub;  // Sub = 0 for addition, Sub = 1 for subtraction
    output [3:0] S;
    output Cout;

    wire [3:0] B_comp;
    wire C1, C2, C3;

    // Perform two's complement if Sub = 1 (invert B and add 1)
    assign B_comp = B ^ {4{Sub}};  // If Sub=1, invert B

    // Instantiating four 1-bit full adders
    one_bit_full_adder FA0 (A[0], B_comp[0], Sub,  S[0], C1);
    one_bit_full_adder FA1 (A[1], B_comp[1], C1,   S[1], C2);
    one_bit_full_adder FA2 (A[2], B_comp[2], C2,   S[2], C3);
    one_bit_full_adder FA3 (A[3], B_comp[3], C3,   S[3], Cout);
endmodule
// Code for Testbench
`timescale 1ns / 1ps

module tb_four_bit_RCA_RCS;
    reg [3:0] A, B;
    reg Sub; // Sub = 0 (Addition), Sub = 1 (Subtraction)
    wire [3:0] S;
    wire Cout;

    // Instantiate the RCS module
    four_bit_RCS uut (
        .A(A),
        .B(B),
        .Sub(Sub),
        .S(S),
        .Cout(Cout)
    );

    initial begin
        $monitor("A=%b B=%b Sub=%b | S=%b Cout=%b", A, B, Sub, S, Cout);
        
        // Unsigned Addition
        A = 4'b0101; B = 4'b0011; Sub = 0; #10;  // 5 + 3 = 8
        A = 4'b0110; B = 4'b0101; Sub = 0; #10;  // 6 + 5 = 11

        // Unsigned Subtraction
        A = 4'b0101; B = 4'b0011; Sub = 1; #10;  // 5 - 3 = 2
        A = 4'b1001; B = 4'b0100; Sub = 1; #10;  // 9 - 4 = 5

        // Signed Operations (Negative results)
        A = 4'b0001; B = 4'b0010; Sub = 1; #10;  // 1 - 2 = -1 (should show 1111 in 2's complement)
        A = 4'b1111; B = 4'b0001; Sub = 1; #10;  // -1 - 1 = -2 (should show 1110 in 2's complement)
        A = 4'b1000; B = 4'b0001; Sub = 1; #10;  // -8 - 1 = -9 (should show 0111 in 2's complement)

        $finish;
    end
endmodule
